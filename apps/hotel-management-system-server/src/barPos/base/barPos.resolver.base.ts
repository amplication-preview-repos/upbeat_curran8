/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BarPos } from "./BarPos";
import { BarPosCountArgs } from "./BarPosCountArgs";
import { BarPosFindManyArgs } from "./BarPosFindManyArgs";
import { BarPosFindUniqueArgs } from "./BarPosFindUniqueArgs";
import { CreateBarPosArgs } from "./CreateBarPosArgs";
import { UpdateBarPosArgs } from "./UpdateBarPosArgs";
import { DeleteBarPosArgs } from "./DeleteBarPosArgs";
import { BarPosService } from "../barPos.service";
@graphql.Resolver(() => BarPos)
export class BarPosResolverBase {
  constructor(protected readonly service: BarPosService) {}

  async _barPosItemsMeta(
    @graphql.Args() args: BarPosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BarPos])
  async barPosItems(
    @graphql.Args() args: BarPosFindManyArgs
  ): Promise<BarPos[]> {
    return this.service.barPosItems(args);
  }

  @graphql.Query(() => BarPos, { nullable: true })
  async barPos(
    @graphql.Args() args: BarPosFindUniqueArgs
  ): Promise<BarPos | null> {
    const result = await this.service.barPos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BarPos)
  async createBarPos(@graphql.Args() args: CreateBarPosArgs): Promise<BarPos> {
    return await this.service.createBarPos({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BarPos)
  async updateBarPos(
    @graphql.Args() args: UpdateBarPosArgs
  ): Promise<BarPos | null> {
    try {
      return await this.service.updateBarPos({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BarPos)
  async deleteBarPos(
    @graphql.Args() args: DeleteBarPosArgs
  ): Promise<BarPos | null> {
    try {
      return await this.service.deleteBarPos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
