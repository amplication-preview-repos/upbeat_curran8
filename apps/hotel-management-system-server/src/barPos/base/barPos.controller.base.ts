/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BarPosService } from "../barPos.service";
import { BarPosCreateInput } from "./BarPosCreateInput";
import { BarPos } from "./BarPos";
import { BarPosFindManyArgs } from "./BarPosFindManyArgs";
import { BarPosWhereUniqueInput } from "./BarPosWhereUniqueInput";
import { BarPosUpdateInput } from "./BarPosUpdateInput";

export class BarPosControllerBase {
  constructor(protected readonly service: BarPosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BarPos })
  async createBarPos(@common.Body() data: BarPosCreateInput): Promise<BarPos> {
    return await this.service.createBarPos({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        quantity: true,
        totalAmount: true,
        price: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BarPos] })
  @ApiNestedQuery(BarPosFindManyArgs)
  async barPosItems(@common.Req() request: Request): Promise<BarPos[]> {
    const args = plainToClass(BarPosFindManyArgs, request.query);
    return this.service.barPosItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        quantity: true,
        totalAmount: true,
        price: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BarPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async barPos(
    @common.Param() params: BarPosWhereUniqueInput
  ): Promise<BarPos | null> {
    const result = await this.service.barPos({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        quantity: true,
        totalAmount: true,
        price: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BarPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBarPos(
    @common.Param() params: BarPosWhereUniqueInput,
    @common.Body() data: BarPosUpdateInput
  ): Promise<BarPos | null> {
    try {
      return await this.service.updateBarPos({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          quantity: true,
          totalAmount: true,
          price: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BarPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBarPos(
    @common.Param() params: BarPosWhereUniqueInput
  ): Promise<BarPos | null> {
    try {
      return await this.service.deleteBarPos({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          quantity: true,
          totalAmount: true,
          price: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
