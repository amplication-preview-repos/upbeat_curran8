/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CurioShopPos } from "./CurioShopPos";
import { CurioShopPosCountArgs } from "./CurioShopPosCountArgs";
import { CurioShopPosFindManyArgs } from "./CurioShopPosFindManyArgs";
import { CurioShopPosFindUniqueArgs } from "./CurioShopPosFindUniqueArgs";
import { CreateCurioShopPosArgs } from "./CreateCurioShopPosArgs";
import { UpdateCurioShopPosArgs } from "./UpdateCurioShopPosArgs";
import { DeleteCurioShopPosArgs } from "./DeleteCurioShopPosArgs";
import { CurioShopPosService } from "../curioShopPos.service";
@graphql.Resolver(() => CurioShopPos)
export class CurioShopPosResolverBase {
  constructor(protected readonly service: CurioShopPosService) {}

  async _curioShopPosItemsMeta(
    @graphql.Args() args: CurioShopPosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CurioShopPos])
  async curioShopPosItems(
    @graphql.Args() args: CurioShopPosFindManyArgs
  ): Promise<CurioShopPos[]> {
    return this.service.curioShopPosItems(args);
  }

  @graphql.Query(() => CurioShopPos, { nullable: true })
  async curioShopPos(
    @graphql.Args() args: CurioShopPosFindUniqueArgs
  ): Promise<CurioShopPos | null> {
    const result = await this.service.curioShopPos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CurioShopPos)
  async createCurioShopPos(
    @graphql.Args() args: CreateCurioShopPosArgs
  ): Promise<CurioShopPos> {
    return await this.service.createCurioShopPos({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CurioShopPos)
  async updateCurioShopPos(
    @graphql.Args() args: UpdateCurioShopPosArgs
  ): Promise<CurioShopPos | null> {
    try {
      return await this.service.updateCurioShopPos({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurioShopPos)
  async deleteCurioShopPos(
    @graphql.Args() args: DeleteCurioShopPosArgs
  ): Promise<CurioShopPos | null> {
    try {
      return await this.service.deleteCurioShopPos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
