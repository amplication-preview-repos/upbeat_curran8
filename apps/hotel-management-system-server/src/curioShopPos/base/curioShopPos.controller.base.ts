/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CurioShopPosService } from "../curioShopPos.service";
import { CurioShopPosCreateInput } from "./CurioShopPosCreateInput";
import { CurioShopPos } from "./CurioShopPos";
import { CurioShopPosFindManyArgs } from "./CurioShopPosFindManyArgs";
import { CurioShopPosWhereUniqueInput } from "./CurioShopPosWhereUniqueInput";
import { CurioShopPosUpdateInput } from "./CurioShopPosUpdateInput";

export class CurioShopPosControllerBase {
  constructor(protected readonly service: CurioShopPosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CurioShopPos })
  async createCurioShopPos(
    @common.Body() data: CurioShopPosCreateInput
  ): Promise<CurioShopPos> {
    return await this.service.createCurioShopPos({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CurioShopPos] })
  @ApiNestedQuery(CurioShopPosFindManyArgs)
  async curioShopPosItems(
    @common.Req() request: Request
  ): Promise<CurioShopPos[]> {
    const args = plainToClass(CurioShopPosFindManyArgs, request.query);
    return this.service.curioShopPosItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CurioShopPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async curioShopPos(
    @common.Param() params: CurioShopPosWhereUniqueInput
  ): Promise<CurioShopPos | null> {
    const result = await this.service.curioShopPos({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CurioShopPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCurioShopPos(
    @common.Param() params: CurioShopPosWhereUniqueInput,
    @common.Body() data: CurioShopPosUpdateInput
  ): Promise<CurioShopPos | null> {
    try {
      return await this.service.updateCurioShopPos({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          price: true,
          quantity: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CurioShopPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCurioShopPos(
    @common.Param() params: CurioShopPosWhereUniqueInput
  ): Promise<CurioShopPos | null> {
    try {
      return await this.service.deleteCurioShopPos({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          price: true,
          quantity: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
