/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RoomServiceService } from "../roomService.service";
import { RoomServiceCreateInput } from "./RoomServiceCreateInput";
import { RoomService } from "./RoomService";
import { RoomServiceFindManyArgs } from "./RoomServiceFindManyArgs";
import { RoomServiceWhereUniqueInput } from "./RoomServiceWhereUniqueInput";
import { RoomServiceUpdateInput } from "./RoomServiceUpdateInput";

export class RoomServiceControllerBase {
  constructor(protected readonly service: RoomServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RoomService })
  async createRoomService(
    @common.Body() data: RoomServiceCreateInput
  ): Promise<RoomService> {
    return await this.service.createRoomService({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        price: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RoomService] })
  @ApiNestedQuery(RoomServiceFindManyArgs)
  async roomServices(@common.Req() request: Request): Promise<RoomService[]> {
    const args = plainToClass(RoomServiceFindManyArgs, request.query);
    return this.service.roomServices({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        price: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RoomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async roomService(
    @common.Param() params: RoomServiceWhereUniqueInput
  ): Promise<RoomService | null> {
    const result = await this.service.roomService({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        serviceType: true,
        price: true,

        room: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RoomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRoomService(
    @common.Param() params: RoomServiceWhereUniqueInput,
    @common.Body() data: RoomServiceUpdateInput
  ): Promise<RoomService | null> {
    try {
      return await this.service.updateRoomService({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          serviceType: true,
          price: true,

          room: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RoomService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRoomService(
    @common.Param() params: RoomServiceWhereUniqueInput
  ): Promise<RoomService | null> {
    try {
      return await this.service.deleteRoomService({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          serviceType: true,
          price: true,

          room: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
