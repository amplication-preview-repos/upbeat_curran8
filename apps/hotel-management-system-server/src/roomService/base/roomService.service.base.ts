/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RoomService as PrismaRoomService,
  Room as PrismaRoom,
} from "@prisma/client";

export class RoomServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoomServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.roomService.count(args);
  }

  async roomServices(
    args: Prisma.RoomServiceFindManyArgs
  ): Promise<PrismaRoomService[]> {
    return this.prisma.roomService.findMany(args);
  }
  async roomService(
    args: Prisma.RoomServiceFindUniqueArgs
  ): Promise<PrismaRoomService | null> {
    return this.prisma.roomService.findUnique(args);
  }
  async createRoomService(
    args: Prisma.RoomServiceCreateArgs
  ): Promise<PrismaRoomService> {
    return this.prisma.roomService.create(args);
  }
  async updateRoomService(
    args: Prisma.RoomServiceUpdateArgs
  ): Promise<PrismaRoomService> {
    return this.prisma.roomService.update(args);
  }
  async deleteRoomService(
    args: Prisma.RoomServiceDeleteArgs
  ): Promise<PrismaRoomService> {
    return this.prisma.roomService.delete(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.roomService
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }
}
