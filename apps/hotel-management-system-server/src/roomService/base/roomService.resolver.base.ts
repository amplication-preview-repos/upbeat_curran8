/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RoomService } from "./RoomService";
import { RoomServiceCountArgs } from "./RoomServiceCountArgs";
import { RoomServiceFindManyArgs } from "./RoomServiceFindManyArgs";
import { RoomServiceFindUniqueArgs } from "./RoomServiceFindUniqueArgs";
import { CreateRoomServiceArgs } from "./CreateRoomServiceArgs";
import { UpdateRoomServiceArgs } from "./UpdateRoomServiceArgs";
import { DeleteRoomServiceArgs } from "./DeleteRoomServiceArgs";
import { Room } from "../../room/base/Room";
import { RoomServiceService } from "../roomService.service";
@graphql.Resolver(() => RoomService)
export class RoomServiceResolverBase {
  constructor(protected readonly service: RoomServiceService) {}

  async _roomServicesMeta(
    @graphql.Args() args: RoomServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RoomService])
  async roomServices(
    @graphql.Args() args: RoomServiceFindManyArgs
  ): Promise<RoomService[]> {
    return this.service.roomServices(args);
  }

  @graphql.Query(() => RoomService, { nullable: true })
  async roomService(
    @graphql.Args() args: RoomServiceFindUniqueArgs
  ): Promise<RoomService | null> {
    const result = await this.service.roomService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoomService)
  async createRoomService(
    @graphql.Args() args: CreateRoomServiceArgs
  ): Promise<RoomService> {
    return await this.service.createRoomService({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RoomService)
  async updateRoomService(
    @graphql.Args() args: UpdateRoomServiceArgs
  ): Promise<RoomService | null> {
    try {
      return await this.service.updateRoomService({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoomService)
  async deleteRoomService(
    @graphql.Args() args: DeleteRoomServiceArgs
  ): Promise<RoomService | null> {
    try {
      return await this.service.deleteRoomService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: RoomService): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
