/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RestaurantPosService } from "../restaurantPos.service";
import { RestaurantPosCreateInput } from "./RestaurantPosCreateInput";
import { RestaurantPos } from "./RestaurantPos";
import { RestaurantPosFindManyArgs } from "./RestaurantPosFindManyArgs";
import { RestaurantPosWhereUniqueInput } from "./RestaurantPosWhereUniqueInput";
import { RestaurantPosUpdateInput } from "./RestaurantPosUpdateInput";

export class RestaurantPosControllerBase {
  constructor(protected readonly service: RestaurantPosService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RestaurantPos })
  async createRestaurantPos(
    @common.Body() data: RestaurantPosCreateInput
  ): Promise<RestaurantPos> {
    return await this.service.createRestaurantPos({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RestaurantPos] })
  @ApiNestedQuery(RestaurantPosFindManyArgs)
  async restaurantPosItems(
    @common.Req() request: Request
  ): Promise<RestaurantPos[]> {
    const args = plainToClass(RestaurantPosFindManyArgs, request.query);
    return this.service.restaurantPosItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RestaurantPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async restaurantPos(
    @common.Param() params: RestaurantPosWhereUniqueInput
  ): Promise<RestaurantPos | null> {
    const result = await this.service.restaurantPos({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        itemId: true,
        itemName: true,
        price: true,
        quantity: true,
        totalAmount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RestaurantPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRestaurantPos(
    @common.Param() params: RestaurantPosWhereUniqueInput,
    @common.Body() data: RestaurantPosUpdateInput
  ): Promise<RestaurantPos | null> {
    try {
      return await this.service.updateRestaurantPos({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          price: true,
          quantity: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RestaurantPos })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRestaurantPos(
    @common.Param() params: RestaurantPosWhereUniqueInput
  ): Promise<RestaurantPos | null> {
    try {
      return await this.service.deleteRestaurantPos({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          itemId: true,
          itemName: true,
          price: true,
          quantity: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
