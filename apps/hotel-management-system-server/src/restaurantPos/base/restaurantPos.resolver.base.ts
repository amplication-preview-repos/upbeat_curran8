/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RestaurantPos } from "./RestaurantPos";
import { RestaurantPosCountArgs } from "./RestaurantPosCountArgs";
import { RestaurantPosFindManyArgs } from "./RestaurantPosFindManyArgs";
import { RestaurantPosFindUniqueArgs } from "./RestaurantPosFindUniqueArgs";
import { CreateRestaurantPosArgs } from "./CreateRestaurantPosArgs";
import { UpdateRestaurantPosArgs } from "./UpdateRestaurantPosArgs";
import { DeleteRestaurantPosArgs } from "./DeleteRestaurantPosArgs";
import { RestaurantPosService } from "../restaurantPos.service";
@graphql.Resolver(() => RestaurantPos)
export class RestaurantPosResolverBase {
  constructor(protected readonly service: RestaurantPosService) {}

  async _restaurantPosItemsMeta(
    @graphql.Args() args: RestaurantPosCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RestaurantPos])
  async restaurantPosItems(
    @graphql.Args() args: RestaurantPosFindManyArgs
  ): Promise<RestaurantPos[]> {
    return this.service.restaurantPosItems(args);
  }

  @graphql.Query(() => RestaurantPos, { nullable: true })
  async restaurantPos(
    @graphql.Args() args: RestaurantPosFindUniqueArgs
  ): Promise<RestaurantPos | null> {
    const result = await this.service.restaurantPos(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RestaurantPos)
  async createRestaurantPos(
    @graphql.Args() args: CreateRestaurantPosArgs
  ): Promise<RestaurantPos> {
    return await this.service.createRestaurantPos({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RestaurantPos)
  async updateRestaurantPos(
    @graphql.Args() args: UpdateRestaurantPosArgs
  ): Promise<RestaurantPos | null> {
    try {
      return await this.service.updateRestaurantPos({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantPos)
  async deleteRestaurantPos(
    @graphql.Args() args: DeleteRestaurantPosArgs
  ): Promise<RestaurantPos | null> {
    try {
      return await this.service.deleteRestaurantPos(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
